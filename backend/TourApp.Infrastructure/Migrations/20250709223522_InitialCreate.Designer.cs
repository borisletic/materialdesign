// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TourApp.Infrastructure.Persistence.Context;

#nullable disable

namespace TourApp.Infrastructure.Migrations
{
    [DbContext(typeof(TourAppDbContext))]
    [Migration("20250709223522_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("PurchaseTours", b =>
                {
                    b.Property<Guid>("PurchaseId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TourId")
                        .HasColumnType("char(36)");

                    b.HasKey("PurchaseId", "TourId");

                    b.HasIndex("TourId");

                    b.ToTable("PurchaseTours");
                });

            modelBuilder.Entity("TourApp.Domain.Entities.KeyPoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("TourId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TourId");

                    b.ToTable("KeyPoints", (string)null);
                });

            modelBuilder.Entity("TourApp.Domain.Entities.MonthlyReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("BestRatedTourId")
                        .HasColumnType("char(36)");

                    b.Property<int>("BestRatedTourRatingCount")
                        .HasColumnType("int");

                    b.Property<double>("BestRatedTourScore")
                        .HasColumnType("double");

                    b.Property<DateTime>("GeneratedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("GuideId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<string>("TourSales")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<Guid?>("WorstRatedTourId")
                        .HasColumnType("char(36)");

                    b.Property<int>("WorstRatedTourRatingCount")
                        .HasColumnType("int");

                    b.Property<double>("WorstRatedTourScore")
                        .HasColumnType("double");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GuideId", "Month", "Year")
                        .IsUnique();

                    b.ToTable("MonthlyReports", (string)null);
                });

            modelBuilder.Entity("TourApp.Domain.Entities.Problem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Events")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<Guid>("TourId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TouristId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("TouristId1")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TourId");

                    b.HasIndex("TouristId");

                    b.HasIndex("TouristId1");

                    b.ToTable("Problems", (string)null);
                });

            modelBuilder.Entity("TourApp.Domain.Entities.Purchase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<decimal>("BonusPointsUsed")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("PurchasedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("TouristId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("TouristId1")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TouristId");

                    b.HasIndex("TouristId1");

                    b.ToTable("Purchases", (string)null);
                });

            modelBuilder.Entity("TourApp.Domain.Entities.Rating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<Guid>("TourId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TouristId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TourId");

                    b.HasIndex("TouristId", "TourId")
                        .IsUnique();

                    b.ToTable("Ratings", (string)null);
                });

            modelBuilder.Entity("TourApp.Domain.Entities.Tour", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<Guid>("GuideId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("GuideId1")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<Guid?>("PurchaseId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GuideId");

                    b.HasIndex("GuideId1");

                    b.HasIndex("PurchaseId");

                    b.ToTable("Tours", (string)null);
                });

            modelBuilder.Entity("TourApp.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsBlocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator<string>("UserType").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TourApp.Domain.Entities.Administrator", b =>
                {
                    b.HasBaseType("TourApp.Domain.Entities.User");

                    b.HasDiscriminator().HasValue("Administrator");
                });

            modelBuilder.Entity("TourApp.Domain.Entities.Guide", b =>
                {
                    b.HasBaseType("TourApp.Domain.Entities.User");

                    b.Property<int>("CancelledToursCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("RewardPoints")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasDiscriminator().HasValue("Guide");
                });

            modelBuilder.Entity("TourApp.Domain.Entities.Tourist", b =>
                {
                    b.HasBaseType("TourApp.Domain.Entities.User");

                    b.Property<decimal>("BonusPoints")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("Interests")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("InvalidProblemsCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasDiscriminator().HasValue("Tourist");
                });

            modelBuilder.Entity("PurchaseTours", b =>
                {
                    b.HasOne("TourApp.Domain.Entities.Purchase", null)
                        .WithMany()
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TourApp.Domain.Entities.Tour", null)
                        .WithMany()
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TourApp.Domain.Entities.KeyPoint", b =>
                {
                    b.HasOne("TourApp.Domain.Entities.Tour", null)
                        .WithMany("KeyPoints")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("TourApp.Domain.ValueObjects.Location", "Location", b1 =>
                        {
                            b1.Property<Guid>("KeyPointId")
                                .HasColumnType("char(36)");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double")
                                .HasColumnName("Latitude");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double")
                                .HasColumnName("Longitude");

                            b1.HasKey("KeyPointId");

                            b1.ToTable("KeyPoints");

                            b1.WithOwner()
                                .HasForeignKey("KeyPointId");
                        });

                    b.Navigation("Location")
                        .IsRequired();
                });

            modelBuilder.Entity("TourApp.Domain.Entities.MonthlyReport", b =>
                {
                    b.HasOne("TourApp.Domain.Entities.Guide", null)
                        .WithMany()
                        .HasForeignKey("GuideId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("TourApp.Domain.Entities.Problem", b =>
                {
                    b.HasOne("TourApp.Domain.Entities.Tour", null)
                        .WithMany()
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TourApp.Domain.Entities.Tourist", null)
                        .WithMany()
                        .HasForeignKey("TouristId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TourApp.Domain.Entities.Tourist", null)
                        .WithMany("ReportedProblems")
                        .HasForeignKey("TouristId1");
                });

            modelBuilder.Entity("TourApp.Domain.Entities.Purchase", b =>
                {
                    b.HasOne("TourApp.Domain.Entities.Tourist", null)
                        .WithMany()
                        .HasForeignKey("TouristId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TourApp.Domain.Entities.Tourist", null)
                        .WithMany("Purchases")
                        .HasForeignKey("TouristId1");

                    b.OwnsOne("TourApp.Domain.ValueObjects.Money", "TotalPrice", b1 =>
                        {
                            b1.Property<Guid>("PurchaseId")
                                .HasColumnType("char(36)");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("TotalPrice");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(3)
                                .HasColumnType("varchar(3)")
                                .HasDefaultValue("EUR")
                                .HasColumnName("Currency");

                            b1.HasKey("PurchaseId");

                            b1.ToTable("Purchases");

                            b1.WithOwner()
                                .HasForeignKey("PurchaseId");
                        });

                    b.Navigation("TotalPrice")
                        .IsRequired();
                });

            modelBuilder.Entity("TourApp.Domain.Entities.Rating", b =>
                {
                    b.HasOne("TourApp.Domain.Entities.Tour", null)
                        .WithMany("Ratings")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TourApp.Domain.Entities.Tourist", null)
                        .WithMany()
                        .HasForeignKey("TouristId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("TourApp.Domain.Entities.Tour", b =>
                {
                    b.HasOne("TourApp.Domain.Entities.Guide", null)
                        .WithMany()
                        .HasForeignKey("GuideId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TourApp.Domain.Entities.Guide", null)
                        .WithMany("Tours")
                        .HasForeignKey("GuideId1");

                    b.HasOne("TourApp.Domain.Entities.Purchase", null)
                        .WithMany("Tours")
                        .HasForeignKey("PurchaseId");

                    b.OwnsOne("TourApp.Domain.ValueObjects.Money", "Price", b1 =>
                        {
                            b1.Property<Guid>("TourId")
                                .HasColumnType("char(36)");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Price");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(3)
                                .HasColumnType("varchar(3)")
                                .HasDefaultValue("EUR")
                                .HasColumnName("Currency");

                            b1.HasKey("TourId");

                            b1.ToTable("Tours");

                            b1.WithOwner()
                                .HasForeignKey("TourId");
                        });

                    b.Navigation("Price")
                        .IsRequired();
                });

            modelBuilder.Entity("TourApp.Domain.Entities.Purchase", b =>
                {
                    b.Navigation("Tours");
                });

            modelBuilder.Entity("TourApp.Domain.Entities.Tour", b =>
                {
                    b.Navigation("KeyPoints");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("TourApp.Domain.Entities.Guide", b =>
                {
                    b.Navigation("Tours");
                });

            modelBuilder.Entity("TourApp.Domain.Entities.Tourist", b =>
                {
                    b.Navigation("Purchases");

                    b.Navigation("ReportedProblems");
                });
#pragma warning restore 612, 618
        }
    }
}
